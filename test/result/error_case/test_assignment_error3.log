line&1:
	$ lexer got token: `PROGRAM`, scan: `program`
	$ lexer got token: `ID`, scan: `test_assignment_error`
START test_assignment_error
comment&declare_all_usaged_temp_variable&0:
J temp_var_declare&test_assignment_error
start&test_assignment_error:
	> program_title -> program id (program_title -> program test_assignment_error)
		> Program start with name: `test_assignment_error`

line&2:
	$ lexer got token: `BEGIN`, scan: `begin`
line&3:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `3`
I_STORE 3 temp&integer&0
	> expression -> INTEGER_LITERAL (expression -> 3)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [3])
	> array_dimension_list -> array_dimension (array_dimension_list -> [3])
	$ lexer got token: `AS`, scan: `as`
	> id -> ID array_dimension_list (id -> a[3])
	> id_list -> id (id_list -> a[3])
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE a integer_array 3
I_STORE 0 a[0]
I_STORE 0 a[1]
I_STORE 0 a[2]
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare a[3] as integer;)

	> statement -> declare_statement
	> statement_list -> statement
line&4:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `666`
I_STORE 666 temp&integer&1
	> expression -> INTEGER_LITERAL (expression -> 666)
	$ lexer got token: `SEMICOLON`, scan: `;`
Type Error: Access non-array symbol with array symbol.
	at line (4:13)
