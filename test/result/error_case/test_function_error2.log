line&1:
	$ lexer got token: `PROGRAM`, scan: `program`
	$ lexer got token: `ID`, scan: `test_function`
START test_function
comment&declare_all_usaged_temp_variable&0:
J temp_var_declare&test_function
start&test_function:
	> program_title -> program id (program_title -> program test_function)
		> Program start with name: `test_function`

line&2:
line&3:
	$ lexer got token: `BEGIN`, scan: `begin`
line&4:
	$ lexer got token: `FN`, scan: `fn`
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `ID`, scan: `test`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	> function_statement_head -> FN type ID LEFT_PARENT (function_statement_head -> fn integer test ()
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `10`
I_STORE 10 fn&temp&integer&0
	> expression -> INTEGER_LITERAL (expression -> 10)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [10])
	> array_dimension_list -> array_dimension (array_dimension_list -> [10])
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID array_dimension_list (id -> fn&test&a[10])
	> arg -> type id (arg -> integer fn&test&a[10])
	> arg_list -> arg (arg_list -> integer fn&test&a)
	> function_statement_prefix -> function_statement_head RIGHT_PARENT (function_statement_prefix -> fn integer test (integer fn&test&a[10]))
fn_name&test:
fn_arg&fn&test&a:
DECLARE fn&test&a integer_array 10
DECLARE test function
DECLARE fn&test&ret&integer integer
line&5:
	$ lexer got token: `RETURN`, scan: `return`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 fn&temp&integer&1
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [0])
	> array_dimension_list -> array_dimension (array_dimension_list -> [0])
	$ lexer got token: `SEMICOLON`, scan: `;`
	> id -> ID array_dimension_list (id -> fn&test&a[0])
	> expression -> id (expression -> fn&test&a[0])
line&6:
	$ lexer got token: `ENDFN`, scan: `endfn`
I_STORE fn&test&a fn&test&ret&integer
RETURN fn&test&ret&integer
	> function_statement -> function_statement_prefix RETURN expression SEMICOLON FNEND

	> statement -> function_statement
	> statement_list -> statement
line&7:
line&8:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `AS`, scan: `as`
	> id -> ID (id -> a)
	> id_list -> id (id_list -> a)
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE a integer
I_STORE 0 a
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare a as integer;)

	> statement -> declare_statement
	> statement_list -> statement_list statement
line&9:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `ID`, scan: `test`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	> expression_list -> expression (expression_list -> a)
Type Error: Args at position 0 except array symbol, but got non-array variable.
	at line (9:16)
