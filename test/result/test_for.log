line&1:
line&2:
comment&Test_for_loop_statement&0:
line&4:
line&5:
	$ lexer got token: `PROGRAM`, scan: `program`
	$ lexer got token: `ID`, scan: `test_for`
START test_for
comment&declare_all_usaged_temp_variable&1:
J temp_var_declare&test_for
start&test_for:
	> program_title -> program id (program_title -> program test_for)
		> Program start with name: `test_for`

line&6:
line&7:
	$ lexer got token: `BEGIN`, scan: `begin`
line&8:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> i)
	> id_list -> id (id_list -> i)
	$ lexer got token: `ID`, scan: `j`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> j)
	> id_list -> id_list comma id (id_list -> i, j)
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `10`
I_STORE 10 temp&integer&0
	> expression -> INTEGER_LITERAL (expression -> 10)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [10])
	> array_dimension_list -> array_dimension (array_dimension_list -> [10])
	$ lexer got token: `AS`, scan: `as`
	> id -> ID array_dimension_list (id -> b[10])
	> id_list -> id_list comma id (id_list -> i, j, b[10])
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE i integer
I_STORE 0 i
DECLARE j integer
I_STORE 0 j
DECLARE b integer_array 10
I_STORE 0 b[0]
I_STORE 0 b[1]
I_STORE 0 b[2]
I_STORE 0 b[3]
I_STORE 0 b[4]
I_STORE 0 b[5]
I_STORE 0 b[6]
I_STORE 0 b[7]
I_STORE 0 b[8]
I_STORE 0 b[9]
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare i, j, b[10] as integer;)

	> statement -> declare_statement
	> statement_list -> statement
line&9:
line&10:
comment&basic_for_loop&2:
comment&to:_0,_1,_2,__8,_9_not_include_10&3:
comment&note:_start_point_and_end_point_will_only_compute_one_time&4:
comment&directly_use_non_array_variable_for_dynamic_for_loop_times&5:
	$ lexer got token: `FOR`, scan: `for`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> i)
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&1
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `TO`, scan: `TO`
	> direction -> to
	$ lexer got token: `INTEGER_LITERAL`, scan: `10`
I_STORE 10 temp&integer&2
	> expression -> INTEGER_LITERAL (expression -> 10)
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> for_prefix -> for left_parent id assign expression direction expression right_parent (for_prefix -> for (i := 0 to 10))
I_STORE temp&integer&1 i
I_CMP i temp&integer&2
JLT label&2
J label&3
label&2:
I_STORE 1 temp&integer&3
J label&4
label&3:
I_STORE 0 temp&integer&3
label&4:
I_CMP 0 temp&integer&3
JNE label&0
J label&1
label&0:
line&15:
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [0])
	> array_dimension_list -> array_dimension (array_dimension_list -> [0])
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID array_dimension_list (id -> b[0])
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `SEMICOLON`, scan: `;`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> Calculating offset for array access.
comment&Calculating_offset&6:
I_STORE 0 temp&integer&4
I_STORE 1 temp&integer&5
I_MUL temp&integer&5 i temp&integer&7
I_ADD temp&integer&4 temp&integer&7 temp&integer&6
I_STORE temp&integer&6 temp&integer&4
I_MUL temp&integer&5 10 temp&integer&7
I_STORE temp&integer&7 temp&integer&5
I_STORE i b[temp&integer&4]
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> b[0] := 0;)

	> statement -> assignment_statement
	> statement_list -> statement
line&16:
	$ lexer got token: `ENDFOR`, scan: `endfor`
INC i
I_CMP i temp&integer&2
JLT label&5
J label&6
label&5:
I_STORE 1 temp&integer&8
J label&7
label&6:
I_STORE 0 temp&integer&8
label&7:
I_CMP 0 temp&integer&8
JNE label&0
label&1
	> for_statement -> for_prefix statement_list endfor

	> statement -> for_statement
	> statement_list -> statement_list statement
line&17:
line&18:
comment&downto:_9,_8,_7,__1,_0_not_include__1&7:
	$ lexer got token: `FOR`, scan: `for`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> i)
	$ lexer got token: `INTEGER_LITERAL`, scan: `9`
I_STORE 9 temp&integer&9
	> expression -> INTEGER_LITERAL (expression -> 9)
	$ lexer got token: `DOWNTO`, scan: `DOWNTO`
	> direction -> downto
	$ lexer got token: `MINUS`, scan: `-`
	$ lexer got token: `INTEGER_LITERAL`, scan: `1`
I_STORE 1 temp&integer&10
	> expression -> INTEGER_LITERAL (expression -> 1)
I_UMINUS temp&integer&10 temp&integer&11
	> expression -> MINUS expression (expression -> -1)
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> for_prefix -> for left_parent id assign expression direction expression right_parent (for_prefix -> for (i := 9 downto -1))
I_STORE temp&integer&9 i
I_CMP i temp&integer&11
JGT label&10
J label&11
label&10:
I_STORE 1 temp&integer&12
J label&12
label&11:
I_STORE 0 temp&integer&12
label&12:
I_CMP 0 temp&integer&12
JNE label&8
J label&9
label&8:
line&20:
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID array_dimension_list (id -> b[1])
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `9`
I_STORE 9 temp&integer&13
	> expression -> INTEGER_LITERAL (expression -> 9)
	$ lexer got token: `MINUS`, scan: `-`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
I_SUB temp&integer&13 i temp&integer&14
	> expression -> expression MINUS expression (8 -> 9 - 1)
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [8])
	> array_dimension_list -> array_dimension (array_dimension_list -> [8])
	$ lexer got token: `MULTIPLY`, scan: `*`
	> id -> ID array_dimension_list (id -> b[8])
	> expression -> id (expression -> b[8])
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `SEMICOLON`, scan: `;`
	> id -> ID array_dimension_list (id -> b[1])
	> expression -> id (expression -> b[1])
	> Calculating offset for array access.
comment&Calculating_offset&8:
I_STORE 0 temp&integer&15
I_STORE 1 temp&integer&16
I_MUL temp&integer&16 temp&integer&14 temp&integer&18
I_ADD temp&integer&15 temp&integer&18 temp&integer&17
I_STORE temp&integer&17 temp&integer&15
I_MUL temp&integer&16 10 temp&integer&18
I_STORE temp&integer&18 temp&integer&16
I_STORE b[temp&integer&15] temp&integer&19
	> extract array access: expression -> b[8]
	> Calculating offset for array access.
comment&Calculating_offset&9:
I_STORE 0 temp&integer&20
I_STORE 1 temp&integer&21
I_MUL temp&integer&21 i temp&integer&23
I_ADD temp&integer&20 temp&integer&23 temp&integer&22
I_STORE temp&integer&22 temp&integer&20
I_MUL temp&integer&21 10 temp&integer&23
I_STORE temp&integer&23 temp&integer&21
I_STORE b[temp&integer&20] temp&integer&24
	> extract array access: expression -> b[1]
I_MUL temp&integer&19 temp&integer&24 temp&integer&25
	> expression -> expression MULTIPLY expression (0 -> 0 * 0)
	> Calculating offset for array access.
comment&Calculating_offset&10:
I_STORE 0 temp&integer&26
I_STORE 1 temp&integer&27
I_MUL temp&integer&27 i temp&integer&29
I_ADD temp&integer&26 temp&integer&29 temp&integer&28
I_STORE temp&integer&28 temp&integer&26
I_MUL temp&integer&27 10 temp&integer&29
I_STORE temp&integer&29 temp&integer&27
I_STORE temp&integer&25 b[temp&integer&26]
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> b[1] := 0;)

	> statement -> assignment_statement
	> statement_list -> statement
line&21:
line&22:
comment&nested_for_loop_&_dynamic_for_loop&11:
	$ lexer got token: `FOR`, scan: `for`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `j`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> j)
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&30
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `TO`, scan: `to`
	> direction -> to
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> for_prefix -> for left_parent id assign expression direction expression right_parent (for_prefix -> for (j := 0 to 1))
I_STORE temp&integer&30 j
I_CMP j i
JLT label&15
J label&16
label&15:
I_STORE 1 temp&integer&31
J label&17
label&16:
I_STORE 0 temp&integer&31
label&17:
I_CMP 0 temp&integer&31
JNE label&13
J label&14
label&13:
line&24:
	$ lexer got token: `WRITE`, scan: `write`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> id -> ID (id -> i)
	> expression -> id (expression -> i)
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID array_dimension_list (id -> b[1])
	> expression -> id (expression -> b[1])
	> expression_list -> expression (expression_list -> b)
	$ lexer got token: `SEMICOLON`, scan: `;`
	> Calculating offset for array access.
comment&Calculating_offset&12:
I_STORE 0 temp&integer&32
I_STORE 1 temp&integer&33
I_MUL temp&integer&33 i temp&integer&35
I_ADD temp&integer&32 temp&integer&35 temp&integer&34
I_STORE temp&integer&34 temp&integer&32
I_MUL temp&integer&33 10 temp&integer&35
I_STORE temp&integer&35 temp&integer&33
CALL write_i b[temp&integer&32]
	> write_statement -> write left_parent expression_list right_parent semicolon (write_statement -> write(b[1]);)

	> statement -> write_statement
	> statement_list -> statement
line&25:
	$ lexer got token: `ENDFOR`, scan: `endfor`
INC j
I_CMP j i
JLT label&18
J label&19
label&18:
I_STORE 1 temp&integer&36
J label&20
label&19:
I_STORE 0 temp&integer&36
label&20:
I_CMP 0 temp&integer&36
JNE label&13
label&14
	> for_statement -> for_prefix statement_list endfor

	> statement -> for_statement
	> statement_list -> statement_list statement
line&26:
	$ lexer got token: `ENDFOR`, scan: `endfor`
DEC i
I_CMP i temp&integer&11
JGT label&21
J label&22
label&21:
I_STORE 1 temp&integer&37
J label&23
label&22:
I_STORE 0 temp&integer&37
label&23:
I_CMP 0 temp&integer&37
JNE label&8
label&9
	> for_statement -> for_prefix statement_list endfor

	> statement -> for_statement
	> statement_list -> statement_list statement
line&27:
	$ lexer got token: `END`, scan: `end`
	> program_body -> begin statement_list end
J label&24

temp_var_declare&test_for:
DECLARE temp&integer&0 integer
DECLARE temp&integer&1 integer
DECLARE temp&integer&2 integer
DECLARE temp&integer&3 integer
DECLARE temp&integer&4 integer
DECLARE temp&integer&5 integer
DECLARE temp&integer&6 integer
DECLARE temp&integer&7 integer
DECLARE temp&integer&8 integer
DECLARE temp&integer&9 integer
DECLARE temp&integer&10 integer
DECLARE temp&integer&11 integer
DECLARE temp&integer&12 integer
DECLARE temp&integer&13 integer
DECLARE temp&integer&14 integer
DECLARE temp&integer&15 integer
DECLARE temp&integer&16 integer
DECLARE temp&integer&17 integer
DECLARE temp&integer&18 integer
DECLARE temp&integer&19 integer
DECLARE temp&integer&20 integer
DECLARE temp&integer&21 integer
DECLARE temp&integer&22 integer
DECLARE temp&integer&23 integer
DECLARE temp&integer&24 integer
DECLARE temp&integer&25 integer
DECLARE temp&integer&26 integer
DECLARE temp&integer&27 integer
DECLARE temp&integer&28 integer
DECLARE temp&integer&29 integer
DECLARE temp&integer&30 integer
DECLARE temp&integer&31 integer
DECLARE temp&integer&32 integer
DECLARE temp&integer&33 integer
DECLARE temp&integer&34 integer
DECLARE temp&integer&35 integer
DECLARE temp&integer&36 integer
DECLARE temp&integer&37 integer
J start&test_for

label&24:
HALT test_for
	> program -> program_title program_body
		> Program done with name: `test_for`
