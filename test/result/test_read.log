line&1:
line&2:
comment&This_is_a_test_file_for_read_statement&0:
comment&Each_variable_affected_by_read_statement_will_be_unstatic_checkable&1:
comment&Assume_cpu_has_already_implemented_`read_<type>`_instruction&2:
comment&`read_<type>_t`:_read_1_unit_data_from_stdin_or_some_input_as_type&3:
line&7:
line&8:
	$ lexer got token: `PROGRAM`, scan: `program`
	$ lexer got token: `ID`, scan: `test_read`
START test_read
comment&declare_all_usaged_temp_variable&4:
J temp_var_declare&test_read
start&test_read:
	> program_title -> program id (program_title -> program test_read)
		> Program start with name: `test_read`

line&9:
	$ lexer got token: `BEGIN`, scan: `begin`
line&10:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> i)
	> id_list -> id (id_list -> i)
	$ lexer got token: `ID`, scan: `j`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> j)
	> id_list -> id_list comma id (id_list -> i, j)
	$ lexer got token: `ID`, scan: `k`
	$ lexer got token: `AS`, scan: `as`
	> id -> ID (id -> k)
	> id_list -> id_list comma id (id_list -> i, j, k)
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE i integer
I_STORE 0 i
DECLARE j integer
I_STORE 0 j
DECLARE k integer
I_STORE 0 k
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare i, j, k as integer;)

	> statement -> declare_statement
	> statement_list -> statement
line&11:
line&12:
	$ lexer got token: `READ`, scan: `read`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> i)
	> id_list -> id (id_list -> i)
	$ lexer got token: `ID`, scan: `j`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> j)
	> id_list -> id_list comma id (id_list -> i, j)
	$ lexer got token: `ID`, scan: `k`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> k)
	> id_list -> id_list comma id (id_list -> i, j, k)
	$ lexer got token: `SEMICOLON`, scan: `;`
CALL read_i i
CALL read_i j
CALL read_i k
	> read_statement -> read left_parent id_list right_parent semicolon (read_statement -> read(i, j, k);)

	> statement -> read_statement
	> statement_list -> statement_list statement
comment&read_integer_into_`i`,_`j`,_`k`&5:
line&14:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `f`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> f)
	> id_list -> id (id_list -> f)
	$ lexer got token: `ID`, scan: `d`
	$ lexer got token: `AS`, scan: `as`
	> id -> ID (id -> d)
	> id_list -> id_list comma id (id_list -> f, d)
	$ lexer got token: `REAL`, scan: `real`
	> type -> REAL
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE f real
F_STORE 0.0 f
DECLARE d real
F_STORE 0.0 d
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare f, d as real;)

	> statement -> declare_statement
	> statement_list -> statement_list statement
line&15:
line&16:
	$ lexer got token: `READ`, scan: `read`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `f`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> f)
	> id_list -> id (id_list -> f)
	$ lexer got token: `ID`, scan: `d`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> d)
	> id_list -> id_list comma id (id_list -> f, d)
	$ lexer got token: `SEMICOLON`, scan: `;`
CALL read_f f
CALL read_f d
	> read_statement -> read left_parent id_list right_parent semicolon (read_statement -> read(f, d);)

	> statement -> read_statement
	> statement_list -> statement_list statement
comment&read_real_into_`f`,_`d`&6:
line&18:
	$ lexer got token: `READ`, scan: `read`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `f`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> f)
	> id_list -> id (id_list -> f)
	$ lexer got token: `ID`, scan: `i`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> i)
	> id_list -> id_list comma id (id_list -> f, i)
	$ lexer got token: `SEMICOLON`, scan: `;`
CALL read_f f
CALL read_i i
	> read_statement -> read left_parent id_list right_parent semicolon (read_statement -> read(f, i);)

	> statement -> read_statement
	> statement_list -> statement_list statement
comment&read_real_into_`f`,_and_read_integer_into_`i`&7:
line&20:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `5`
I_STORE 5 temp&integer&0
	> expression -> INTEGER_LITERAL (expression -> 5)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [5])
	> array_dimension_list -> array_dimension (array_dimension_list -> [5])
	$ lexer got token: `AS`, scan: `as`
	> id -> ID array_dimension_list (id -> arr[5])
	> id_list -> id (id_list -> arr[5])
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE arr integer_array 5
I_STORE 0 arr[0]
I_STORE 0 arr[1]
I_STORE 0 arr[2]
I_STORE 0 arr[3]
I_STORE 0 arr[4]
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare arr[5] as integer;)

	> statement -> declare_statement
	> statement_list -> statement_list statement
line&21:
line&22:
	$ lexer got token: `READ`, scan: `read`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&1
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [0])
	> array_dimension_list -> array_dimension (array_dimension_list -> [0])
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID array_dimension_list (id -> arr[0])
	> id_list -> id (id_list -> arr[0])
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `1`
I_STORE 1 temp&integer&2
	> expression -> INTEGER_LITERAL (expression -> 1)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID array_dimension_list (id -> arr[1])
	> id_list -> id_list comma id (id_list -> arr[0], arr[1])
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `2`
I_STORE 2 temp&integer&3
	> expression -> INTEGER_LITERAL (expression -> 2)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [2])
	> array_dimension_list -> array_dimension (array_dimension_list -> [2])
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID array_dimension_list (id -> arr[2])
	> id_list -> id_list comma id (id_list -> arr[0], arr[1], arr[2])
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `3`
I_STORE 3 temp&integer&4
	> expression -> INTEGER_LITERAL (expression -> 3)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [3])
	> array_dimension_list -> array_dimension (array_dimension_list -> [3])
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID array_dimension_list (id -> arr[3])
	> id_list -> id_list comma id (id_list -> arr[0], arr[1], arr[2], arr[3])
	$ lexer got token: `ID`, scan: `arr`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `4`
I_STORE 4 temp&integer&5
	> expression -> INTEGER_LITERAL (expression -> 4)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [4])
	> array_dimension_list -> array_dimension (array_dimension_list -> [4])
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID array_dimension_list (id -> arr[4])
	> id_list -> id_list comma id (id_list -> arr[0], arr[1], arr[2], arr[3], arr[4])
	$ lexer got token: `SEMICOLON`, scan: `;`
	> Calculating offset for array access.
comment&Calculating_offset&8:
I_STORE 0 temp&integer&6
I_STORE 1 temp&integer&7
I_MUL temp&integer&7 temp&integer&1 temp&integer&9
I_ADD temp&integer&6 temp&integer&9 temp&integer&8
I_STORE temp&integer&8 temp&integer&6
I_MUL temp&integer&7 5 temp&integer&9
I_STORE temp&integer&9 temp&integer&7
CALL read_i arr[temp&integer&6]
	> Calculating offset for array access.
comment&Calculating_offset&9:
I_STORE 0 temp&integer&10
I_STORE 1 temp&integer&11
I_MUL temp&integer&11 temp&integer&2 temp&integer&13
I_ADD temp&integer&10 temp&integer&13 temp&integer&12
I_STORE temp&integer&12 temp&integer&10
I_MUL temp&integer&11 5 temp&integer&13
I_STORE temp&integer&13 temp&integer&11
CALL read_i arr[temp&integer&10]
	> Calculating offset for array access.
comment&Calculating_offset&10:
I_STORE 0 temp&integer&14
I_STORE 1 temp&integer&15
I_MUL temp&integer&15 temp&integer&3 temp&integer&17
I_ADD temp&integer&14 temp&integer&17 temp&integer&16
I_STORE temp&integer&16 temp&integer&14
I_MUL temp&integer&15 5 temp&integer&17
I_STORE temp&integer&17 temp&integer&15
CALL read_i arr[temp&integer&14]
	> Calculating offset for array access.
comment&Calculating_offset&11:
I_STORE 0 temp&integer&18
I_STORE 1 temp&integer&19
I_MUL temp&integer&19 temp&integer&4 temp&integer&21
I_ADD temp&integer&18 temp&integer&21 temp&integer&20
I_STORE temp&integer&20 temp&integer&18
I_MUL temp&integer&19 5 temp&integer&21
I_STORE temp&integer&21 temp&integer&19
CALL read_i arr[temp&integer&18]
	> Calculating offset for array access.
comment&Calculating_offset&12:
I_STORE 0 temp&integer&22
I_STORE 1 temp&integer&23
I_MUL temp&integer&23 temp&integer&5 temp&integer&25
I_ADD temp&integer&22 temp&integer&25 temp&integer&24
I_STORE temp&integer&24 temp&integer&22
I_MUL temp&integer&23 5 temp&integer&25
I_STORE temp&integer&25 temp&integer&23
CALL read_i arr[temp&integer&22]
	> read_statement -> read left_parent id_list right_parent semicolon (read_statement -> read(arr[0], arr[1], arr[2], arr[3], arr[4]);)

	> statement -> read_statement
	> statement_list -> statement_list statement
line&23:
comment&read_5_integers_into_`arr[0]`,_`arr[1]`,_`arr[2]`,_`arr[3]`,_`arr[4]`&13:
	$ lexer got token: `END`, scan: `end`
	> program_body -> begin statement_list end
J label&0

temp_var_declare&test_read:
DECLARE temp&integer&0 integer
DECLARE temp&integer&1 integer
DECLARE temp&integer&2 integer
DECLARE temp&integer&3 integer
DECLARE temp&integer&4 integer
DECLARE temp&integer&5 integer
DECLARE temp&integer&6 integer
DECLARE temp&integer&7 integer
DECLARE temp&integer&8 integer
DECLARE temp&integer&9 integer
DECLARE temp&integer&10 integer
DECLARE temp&integer&11 integer
DECLARE temp&integer&12 integer
DECLARE temp&integer&13 integer
DECLARE temp&integer&14 integer
DECLARE temp&integer&15 integer
DECLARE temp&integer&16 integer
DECLARE temp&integer&17 integer
DECLARE temp&integer&18 integer
DECLARE temp&integer&19 integer
DECLARE temp&integer&20 integer
DECLARE temp&integer&21 integer
DECLARE temp&integer&22 integer
DECLARE temp&integer&23 integer
DECLARE temp&integer&24 integer
DECLARE temp&integer&25 integer
J start&test_read

label&0:
HALT test_read
	> program -> program_title program_body
		> Program done with name: `test_read`
