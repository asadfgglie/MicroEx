line&1:
line&2:
comment&Test_if_statement&0:
line&4:
line&5:
	$ lexer got token: `PROGRAM`, scan: `program`
	$ lexer got token: `ID`, scan: `test_if`
START test_if
comment&declare_all_usaged_temp_variable&1:
J temp_var_declare&test_if
start&test_if:
	> program_title -> program id (program_title -> program test_if)
		> Program start with name: `test_if`

line&6:
	$ lexer got token: `BEGIN`, scan: `begin`
line&7:
	$ lexer got token: `DECLARE`, scan: `declare`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `COMMA`, scan: `,`
	> id -> ID (id -> a)
	> id_list -> id (id_list -> a)
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `3`
I_STORE 3 temp&integer&0
	> expression -> INTEGER_LITERAL (expression -> 3)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [3])
	> array_dimension_list -> array_dimension (array_dimension_list -> [3])
	$ lexer got token: `AS`, scan: `as`
	> id -> ID array_dimension_list (id -> b[3])
	> id_list -> id_list comma id (id_list -> a, b[3])
	$ lexer got token: `INTEGER`, scan: `integer`
	> type -> INTEGER
	$ lexer got token: `SEMICOLON`, scan: `;`
DECLARE a integer
I_STORE 0 a
DECLARE b integer_array 3
I_STORE 0 b[0]
I_STORE 0 b[1]
I_STORE 0 b[2]
	> declare_statement -> declare id_list as type semicolon (declare_statement -> declare a, b[3] as integer;)

	> statement -> declare_statement
	> statement_list -> statement
line&8:
line&9:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `66`
I_STORE 66 temp&integer&1
	> expression -> INTEGER_LITERAL (expression -> 66)
	$ lexer got token: `SEMICOLON`, scan: `;`
I_STORE temp&integer&1 a
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> a := 66;)

	> statement -> assignment_statement
	> statement_list -> statement_list statement
line&10:
line&11:
	$ lexer got token: `IF`, scan: `if`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `GREAT_EQUAL`, scan: `>=`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `66`
I_STORE 66 temp&integer&2
	> expression -> INTEGER_LITERAL (expression -> 66)
	$ lexer got token: `AND`, scan: `&&`
I_CMP a temp&integer&2
JGE label&0
J label&1
label&0:
I_STORE 1 temp&integer&3
J label&2
label&1:
I_STORE 0 temp&integer&3
label&2:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `LESS`, scan: `<`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `100`
I_STORE 100 temp&integer&4
	> expression -> INTEGER_LITERAL (expression -> 100)
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
I_CMP a temp&integer&4
JLT label&3
J label&4
label&3:
I_STORE 1 temp&integer&5
J label&5
label&4:
I_STORE 0 temp&integer&5
label&5:
AND temp&integer&3 temp&integer&5 temp&integer&6
	$ lexer got token: `THEN`, scan: `then`
I_CMP 0 temp&integer&6
JNE label&6
J label&7
label&6:
	> if_prefix -> if left_parent expression right_parent then (if_prefix -> if (true) then)
line&12:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `8`
I_STORE 8 temp&integer&7
	> expression -> INTEGER_LITERAL (expression -> 8)
	$ lexer got token: `SEMICOLON`, scan: `;`
I_STORE temp&integer&7 a
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> a := 8;)

	> statement -> assignment_statement
	> statement_list -> statement
comment&if_statement&2:
	$ lexer got token: `ENDIF`, scan: `endif`
	> if_suffix -> statement_list endif
label&7:
label&8:
	> if_statement -> if_prefix if_suffix

	> statement -> if_statement
	> statement_list -> statement_list statement
line&14:
line&15:
comment&if_else_statement&3:
	$ lexer got token: `IF`, scan: `if`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `NOT_EQUAL`, scan: `!=`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `8`
I_STORE 8 temp&integer&8
	> expression -> INTEGER_LITERAL (expression -> 8)
	$ lexer got token: `OR`, scan: `||`
I_CMP a temp&integer&8
JNE label&9
J label&10
label&9:
I_STORE 1 temp&integer&9
J label&11
label&10:
I_STORE 0 temp&integer&9
label&11:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `EQUAL`, scan: `==`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&10
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `AND`, scan: `&&`
I_CMP a temp&integer&10
JEQ label&12
J label&13
label&12:
I_STORE 1 temp&integer&11
J label&14
label&13:
I_STORE 0 temp&integer&11
label&14:
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `1`
I_STORE 1 temp&integer&12
	> expression -> INTEGER_LITERAL (expression -> 1)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `GREAT`, scan: `>`
	> id -> ID array_dimension_list (id -> b[1])
	> expression -> id (expression -> b)
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `2`
I_STORE 2 temp&integer&13
	> expression -> INTEGER_LITERAL (expression -> 2)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [2])
	> array_dimension_list -> array_dimension (array_dimension_list -> [2])
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID array_dimension_list (id -> b[2])
	> expression -> id (expression -> b)
	> Calculating offset for array access.
comment&Calculating_offset&4:
I_STORE 0 temp&integer&14
I_STORE 1 temp&integer&15
I_MUL temp&integer&15 2 temp&integer&17
I_ADD temp&integer&14 temp&integer&17 temp&integer&16
I_STORE temp&integer&16 temp&integer&14
I_MUL temp&integer&15 3 temp&integer&17
I_STORE temp&integer&17 temp&integer&15
I_STORE b[temp&integer&14] temp&integer&18
	> extract array access: expression -> b[2]
	> Calculating offset for array access.
comment&Calculating_offset&5:
I_STORE 0 temp&integer&19
I_STORE 1 temp&integer&20
I_MUL temp&integer&20 2 temp&integer&22
I_ADD temp&integer&19 temp&integer&22 temp&integer&21
I_STORE temp&integer&21 temp&integer&19
I_MUL temp&integer&20 3 temp&integer&22
I_STORE temp&integer&22 temp&integer&20
I_STORE b[temp&integer&19] temp&integer&23
	> extract array access: expression -> b[2]
I_CMP temp&integer&18 temp&integer&23
JGT label&15
J label&16
label&15:
I_STORE 1 temp&integer&24
J label&17
label&16:
I_STORE 0 temp&integer&24
label&17:
AND temp&integer&11 temp&integer&24 temp&integer&25
OR temp&integer&9 temp&integer&25 temp&integer&26
	$ lexer got token: `THEN`, scan: `then`
I_CMP 0 temp&integer&26
JNE label&18
J label&19
label&18:
	> if_prefix -> if left_parent expression right_parent then (if_prefix -> if (false) then)
line&17:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `MINUS`, scan: `-`
	$ lexer got token: `INTEGER_LITERAL`, scan: `11`
I_STORE 11 temp&integer&27
	> expression -> INTEGER_LITERAL (expression -> 11)
I_UMINUS temp&integer&27 temp&integer&28
	> expression -> MINUS expression (expression -> -11)
	$ lexer got token: `SEMICOLON`, scan: `;`
I_STORE temp&integer&28 a
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> a := -11;)

	> statement -> assignment_statement
	> statement_list -> statement
line&18:
	$ lexer got token: `ELSE`, scan: `else`
J label&20
label&19:
	> if_statement -> if_prefix statement_list else if_suffix
line&19:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `66`
I_STORE 66 temp&integer&29
	> expression -> INTEGER_LITERAL (expression -> 66)
	$ lexer got token: `SEMICOLON`, scan: `;`
I_STORE temp&integer&29 a
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> a := 66;)

	> statement -> assignment_statement
	> statement_list -> statement
line&20:
	$ lexer got token: `ENDIF`, scan: `endif`
	> if_suffix -> statement_list endif
label&20:
	> if_statement -> if_else_prefix if_suffix

	> statement -> if_statement
	> statement_list -> statement_list statement
line&21:
line&22:
comment&nested_if&6:
	$ lexer got token: `IF`, scan: `if`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&30
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [0])
	> array_dimension_list -> array_dimension (array_dimension_list -> [0])
	$ lexer got token: `GREAT`, scan: `>`
	> id -> ID array_dimension_list (id -> b[0])
	> expression -> id (expression -> b)
	$ lexer got token: `ID`, scan: `b`
	$ lexer got token: `LEFT_BRACKET`, scan: `[`
	$ lexer got token: `INTEGER_LITERAL`, scan: `1`
I_STORE 1 temp&integer&31
	> expression -> INTEGER_LITERAL (expression -> 1)
	$ lexer got token: `RIGHT_BRACKET`, scan: `]`
	> array_dimension -> LEFT_BRACKET expression RIGHT_BRACKET (array_dimension -> [1])
	> array_dimension_list -> array_dimension (array_dimension_list -> [1])
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID array_dimension_list (id -> b[1])
	> expression -> id (expression -> b)
	> Calculating offset for array access.
comment&Calculating_offset&7:
I_STORE 0 temp&integer&32
I_STORE 1 temp&integer&33
I_MUL temp&integer&33 1 temp&integer&35
I_ADD temp&integer&32 temp&integer&35 temp&integer&34
I_STORE temp&integer&34 temp&integer&32
I_MUL temp&integer&33 3 temp&integer&35
I_STORE temp&integer&35 temp&integer&33
I_STORE b[temp&integer&32] temp&integer&36
	> extract array access: expression -> b[1]
	> Calculating offset for array access.
comment&Calculating_offset&8:
I_STORE 0 temp&integer&37
I_STORE 1 temp&integer&38
I_MUL temp&integer&38 1 temp&integer&40
I_ADD temp&integer&37 temp&integer&40 temp&integer&39
I_STORE temp&integer&39 temp&integer&37
I_MUL temp&integer&38 3 temp&integer&40
I_STORE temp&integer&40 temp&integer&38
I_STORE b[temp&integer&37] temp&integer&41
	> extract array access: expression -> b[1]
I_CMP temp&integer&36 temp&integer&41
JGT label&21
J label&22
label&21:
I_STORE 1 temp&integer&42
J label&23
label&22:
I_STORE 0 temp&integer&42
label&23:
	$ lexer got token: `THEN`, scan: `then`
I_CMP 0 temp&integer&42
JNE label&24
J label&25
label&24:
	> if_prefix -> if left_parent expression right_parent then (if_prefix -> if (false) then)
line&24:
	$ lexer got token: `IF`, scan: `if`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `LESS`, scan: `<`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	$ lexer got token: `INTEGER_LITERAL`, scan: `0`
I_STORE 0 temp&integer&43
	> expression -> INTEGER_LITERAL (expression -> 0)
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
I_CMP a temp&integer&43
JLT label&27
J label&28
label&27:
I_STORE 1 temp&integer&44
J label&29
label&28:
I_STORE 0 temp&integer&44
label&29:
	$ lexer got token: `THEN`, scan: `then`
I_CMP 0 temp&integer&44
JNE label&30
J label&31
label&30:
	> if_prefix -> if left_parent expression right_parent then (if_prefix -> if (false) then)
line&25:
	$ lexer got token: `WRITE`, scan: `write`
	$ lexer got token: `LEFT_PARENT`, scan: `(`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `RIGHT_PARENT`, scan: `)`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
	> expression_list -> expression (expression_list -> a)
	$ lexer got token: `SEMICOLON`, scan: `;`
CALL write_i a
	> write_statement -> write left_parent expression_list right_parent semicolon (write_statement -> write(a);)

	> statement -> write_statement
	> statement_list -> statement
line&26:
	$ lexer got token: `ENDIF`, scan: `endif`
	> if_suffix -> statement_list endif
label&31:
label&32:
	> if_statement -> if_prefix if_suffix

	> statement -> if_statement
	> statement_list -> statement
line&27:
	$ lexer got token: `ELSE`, scan: `else`
J label&26
label&25:
	> if_statement -> if_prefix statement_list else if_suffix
line&28:
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `ASSIGN`, scan: `:=`
	> id -> ID (id -> a)
	$ lexer got token: `MINUS`, scan: `-`
	$ lexer got token: `ID`, scan: `a`
	$ lexer got token: `SEMICOLON`, scan: `;`
	> id -> ID (id -> a)
	> expression -> id (expression -> a)
I_UMINUS a temp&integer&45
	> expression -> MINUS expression (expression -> -66)
I_STORE temp&integer&45 a
	> assignment_statement -> id ASSIGN expression semicolon (assignment -> a := -66;)

	> statement -> assignment_statement
	> statement_list -> statement
line&29:
	$ lexer got token: `ENDIF`, scan: `endif`
	> if_suffix -> statement_list endif
label&26:
	> if_statement -> if_else_prefix if_suffix

	> statement -> if_statement
	> statement_list -> statement_list statement
line&30:
	$ lexer got token: `END`, scan: `end`
	> program_body -> begin statement_list end
temp_var_declare&test_if:
DECLARE temp&integer&0 integer
DECLARE temp&integer&1 integer
DECLARE temp&integer&2 integer
DECLARE temp&integer&3 integer
DECLARE temp&integer&4 integer
DECLARE temp&integer&5 integer
DECLARE temp&integer&6 integer
DECLARE temp&integer&7 integer
DECLARE temp&integer&8 integer
DECLARE temp&integer&9 integer
DECLARE temp&integer&10 integer
DECLARE temp&integer&11 integer
DECLARE temp&integer&12 integer
DECLARE temp&integer&13 integer
DECLARE temp&integer&14 integer
DECLARE temp&integer&15 integer
DECLARE temp&integer&16 integer
DECLARE temp&integer&17 integer
DECLARE temp&integer&18 integer
DECLARE temp&integer&19 integer
DECLARE temp&integer&20 integer
DECLARE temp&integer&21 integer
DECLARE temp&integer&22 integer
DECLARE temp&integer&23 integer
DECLARE temp&integer&24 integer
DECLARE temp&integer&25 integer
DECLARE temp&integer&26 integer
DECLARE temp&integer&27 integer
DECLARE temp&integer&28 integer
DECLARE temp&integer&29 integer
DECLARE temp&integer&30 integer
DECLARE temp&integer&31 integer
DECLARE temp&integer&32 integer
DECLARE temp&integer&33 integer
DECLARE temp&integer&34 integer
DECLARE temp&integer&35 integer
DECLARE temp&integer&36 integer
DECLARE temp&integer&37 integer
DECLARE temp&integer&38 integer
DECLARE temp&integer&39 integer
DECLARE temp&integer&40 integer
DECLARE temp&integer&41 integer
DECLARE temp&integer&42 integer
DECLARE temp&integer&43 integer
DECLARE temp&integer&44 integer
DECLARE temp&integer&45 integer
J start&test_if

HALT test_if
	> program -> program_title program_body
		> Program done with name: `test_if`
